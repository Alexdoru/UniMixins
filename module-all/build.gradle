archivesBaseName = archivesBaseName.replace("-1.7.10", "-all-1.7.10")

// The order of these determines the order embedded core plugins get initialized in
ext.moduleNames = ["module-mixin", "module-compat", "module-mixingasm", "module-spongemixins", "module-mixinbooterlegacy", "module-gasstation", "module-gtnhmixins", "module-mixinextras"]

def getModuleJar(name) {
	def jarTaskName = name == "module-mixin" ? ":module-mixin:shadowJarUnimix" : ":$name:jar"
	
	return tasks.getByPath(jarTaskName).getOutputs().getFiles().getSingleFile()
}

def getModuleJars() {
	return moduleNames.collect { getModuleJar(it) }
}

import java.util.jar.Manifest;

def getCorePlugin(file) {
	def plugin = null
	zipTree(file).matching { include 'META-INF/MANIFEST.MF' }.getSingleFile().withInputStream {
		is ->
			def man = new Manifest(is)
			plugin = man.mainAttributes.getValue("FMLCorePlugin")
		}
	return plugin
}

task createMergedMcmodInfo() {
	outputs.file("build/tmp/mcmod.info")
	outputs.upToDateWhen { false }
	doLast {
		def mergedJson = []
		getModuleJars().each {
			j ->
				def json = new groovy.json.JsonSlurper().parseText(zipTree(j).matching { include 'mcmod.info' }.getSingleFile().text)
				mergedJson += json
		}
		
		def desc = mergedJson.collect{ it.name.split(": ")[1]}.join("; ")
		mergedJson[0].name = "UniMixins"
		mergedJson[0].description = "UniMixins composite jar consisting of the following modules:\n" + desc
		mergedJson[0].version = version
		
		file("build/tmp/mcmod.info").text = groovy.json.JsonOutput.prettyPrint(groovy.json.JsonOutput.toJson(mergedJson))
		return file("build/tmp/mcmod.info")
	}
	
	moduleNames.each { dependsOn tasks.getByPath(":$it:build") }
}

task createEmbeddedCorePluginsFile() {
	def path = "build/tmp/unimixins-all.EmbeddedFMLCorePlugins.txt"
	outputs.file(path)
	outputs.upToDateWhen { false }
	doLast {
		file(path).text = getModuleJars().findResults { getCorePlugin(it) }.join(' ')
		return file(path)
	}
	
	moduleNames.each { dependsOn tasks.getByPath(":$it:build") }
}

task createMergedAnnotationProcessorConfig() {
	def path = "build/tmp/javax.annotation.processing.Processor"
	outputs.file(path)
	outputs.upToDateWhen { false }
	doLast {
		// MixinExtras's APs have to be registered before Mixin's,
		// so we manually merge the APs to ensure this is the case.
		file(path).text = """com.llamalad7.mixinextras.MixinExtrasAP
io.github.tox1cozz.mixinextras.MixinExtrasAnnotationProcessor
com.gtnewhorizon.mixinextras.MixinExtrasAP
org.spongepowered.tools.obfuscation.MixinObfuscationProcessorInjection
org.spongepowered.tools.obfuscation.MixinObfuscationProcessorTargets
"""

		return file(path)
	}
}

jar {
	dependsOn tasks.createMergedMcmodInfo
	dependsOn tasks.createEmbeddedCorePluginsFile
	dependsOn tasks.createMergedAnnotationProcessorConfig
	
	moduleNames.each {
		def name = it
		def j = getModuleJar(it)
		into ""
		from(zipTree(j)){
			exclude 'mcmod.info'
			exclude 'META-INF/MANIFEST.MF'
			exclude 'CREDITS', 'LICENSE*', 'README*'
			exclude 'META-INF/services/javax.annotation.processing.Processor'
			into("")
		}
		from(zipTree(j)){
			include 'CREDITS', 'LICENSE*', 'README*'
			into("META-INF/licenses/$name")
		}
	}
	
	from tasks.createMergedMcmodInfo.getOutputs().getFiles().getSingleFile()
	from(tasks.createEmbeddedCorePluginsFile.getOutputs().getFiles().getSingleFile()) {
		into 'META-INF'
	}
	from(tasks.createMergedAnnotationProcessorConfig.getOutputs().getFiles().getSingleFile()) {
		into 'META-INF/services'
	}
	
	manifest {
		attributes (
			'TweakClass': 'org.spongepowered.asm.launch.MixinTweaker',
			'FMLCorePluginContainsFMLMod': true,
			'ForceLoadAsMod': true,
			'FMLCorePlugin': 'io.github.legacymoddingmc.unimixins.all.AllCore',
		)
	}
}

clean {
	moduleNames.each { dependsOn tasks.getByPath(":$it:clean") }
}

reobf.enabled = false
