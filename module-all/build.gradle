archivesBaseName = archivesBaseName.replace("-1.7.10", "-all-1.7.10")

// The order of these determines the order embedded core plugins get initialized in
ext.moduleNames = ["module-mixin", "module-compat", "module-mixingam", "module-spongemixins", "module-gtnhmixins"]

def getModuleJars() {
	return moduleNames.collect { it -> tasks.getByPath(":$it:jar").getOutputs().getFiles().getSingleFile() }
}

import java.util.jar.Manifest;

def getCorePlugin(file) {
	def plugin = null
	zipTree(file).matching { include 'META-INF/MANIFEST.MF' }.getSingleFile().withInputStream {
		is ->
			def man = new Manifest(is)
			plugin = man.mainAttributes.getValue("FMLCorePlugin")
		}
	return plugin
}

task createMergedMcmodInfo() {
	outputs.file("build/tmp/mcmod.info")
	doLast {
		def mergedJson = []
		getModuleJars().each {
			j ->
				def json = new groovy.json.JsonSlurper().parseText(zipTree(j).matching { include 'mcmod.info' }.getSingleFile().text)
				mergedJson += json
		}
		
		def desc = mergedJson.collect{ "* " + it.name + "\n" }.join("")
		mergedJson[0].name = "UniMixins"
		mergedJson[0].description = "UniMixins composite jar consisting of the following modules:\n" + desc
		mergedJson[0].version = version
		
		file("build/tmp/mcmod.info").text = groovy.json.JsonOutput.prettyPrint(groovy.json.JsonOutput.toJson(mergedJson))
		return file("build/tmp/mcmod.info")
	}
	
	moduleNames.each { dependsOn tasks.getByPath(":$it:build") }
}

task createEmbeddedCorePluginsFile() {
	def path = "build/tmp/unimixins-all.EmbeddedFMLCorePlugins.txt"
	outputs.file(path)
	doLast {
		file(path).text = getModuleJars().findResults { getCorePlugin(it) }.join(' ')
		return file(path)
	}
	
	moduleNames.each { dependsOn tasks.getByPath(":$it:build") }
}

jar {
	dependsOn tasks.createMergedMcmodInfo
	dependsOn tasks.createEmbeddedCorePluginsFile
	
	getModuleJars().each {
		j -> from zipTree(j).matching {
			exclude 'mcmod.info'
			exclude 'META-INF/MANIFEST.MF'
		}
	}
	
	from tasks.createMergedMcmodInfo.getOutputs().getFiles().getSingleFile()
	from(tasks.createEmbeddedCorePluginsFile.getOutputs().getFiles().getSingleFile()) {
		into 'META-INF'
	}
	
	manifest {
		attributes (
			'TweakClass': 'org.spongepowered.asm.launch.MixinTweaker',
			'FMLCorePluginContainsFMLMod': true,
			'ForceLoadAsMod': true,
			'FMLCorePlugin': 'io.github.legacymoddingmc.unimixins.all.AllCore',
		)
	}
}

clean {
	moduleNames.each { dependsOn tasks.getByPath(":$it:clean") }
}

reobf.enabled = false
