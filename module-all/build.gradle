def getModuleJars() {
	return [
		tasks.getByPath(':module-mixin:jar').getOutputs().getFiles().getSingleFile(),
		tasks.getByPath(':module-spongemixins:jar').getOutputs().getFiles().getSingleFile(),
	]
}

task createMergedMcmodInfo() {
	outputs.file("build/tmp/mcmod.info")
	doLast {
		def mergedJson = []
		getModuleJars().each {
			j ->
				def json = new groovy.json.JsonSlurper().parseText(zipTree(j).matching { include 'mcmod.info' }.getSingleFile().text)
				mergedJson += json
		}
		
		def desc = mergedJson.collect{ "* " + it.name + "\n" }.join("")
		mergedJson[0].name = "UniMixins"
		mergedJson[0].description = "UniMixins composite jar consisting of the following modules:\n" + desc
		
		file("build/tmp/mcmod.info").text = groovy.json.JsonOutput.prettyPrint(groovy.json.JsonOutput.toJson(mergedJson))
		return file("build/tmp/mcmod.info")
	}
	
	dependsOn tasks.getByPath(':module-mixin:build')
	dependsOn tasks.getByPath(':module-spongemixins:build')
}

task finalJar(type: Zip) {
	
	getModuleJars().each { j -> from zipTree(j).matching { exclude 'mcmod.info' } }
	
	from tasks.createMergedMcmodInfo.getOutputs().getFiles().getSingleFile()
	
	archiveFileName = tasks.jar.archiveFileName.get().replace("-1.7.10", "-all-1.7.10")
	destinationDirectory = tasks.jar.destinationDirectory
	
	doLast {
		delete jar.archiveFile
	}
	
	dependsOn tasks.createMergedMcmodInfo
}

build.dependsOn tasks.finalJar

clean.dependsOn tasks.getByPath(':module-mixin:clean')
clean.dependsOn tasks.getByPath(':module-spongemixins:clean')
