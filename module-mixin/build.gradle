import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

buildscript {
	repositories {
		gradlePluginPortal()
	}
	dependencies {
		classpath 'com.github.jengelman.gradle.plugins:shadow:6.1.0'
	}
}

repositories {
	maven {
		name = 'sponge'
		url = 'https://repo.spongepowered.org/maven/'
	}
	maven {
		url = "https://mvn.falsepattern.com/releases"
	}
	maven {
		name = "GTNH Maven"
		url = "http://jenkins.usrv.eu:8081/nexus/content/groups/public/"
		allowInsecureProtocol = true
	}
	mavenLocal()
}

def versionBase = version
archivesBaseName = archivesBaseName.replace("-1.7.10", "-mixin-1.7.10")

configurations.archives.artifacts.clear()

apply plugin: "com.github.johnrengelman.shadow"

["spongepowered", "fabric", "gasmix", "gtnh", "unimix"].each {
	def mixinSource = it
	def sourceSuffix = it.capitalize()
	def mixinClassifier = "UNKNOWN"
	def mixinSourceCapitalized = [spongepowered: "SpongePowered", fabric: "Fabric", gasmix: "GasMix", gtnh: "GTNH", unimix: "UniMix"][mixinSource]

	configurations.create("shadow$sourceSuffix")
	configurations.create("shadowBridge$sourceSuffix")

	if (mixinSource == "fabric" || mixinSource == "spongepowered" || mixinSource == "unimix") {
		// Fabric / SpongePowered / UniMix
		
		if (mixinSource == "fabric" || mixinSource == "unimix") {
			def mixinVersion = mixinSource == "fabric" ? "0.11.4+mixin.0.8.5" : "0.11.5+mixin.0.8.5"
			if (mixinSource == "unimix" && (project.hasProperty("local") || true)) {
				mixinVersion += "-local"
			}
			def mixinGroup = mixinSource == "fabric" ? "net.fabricmc" : "io.github.legacymoddingmc"
			def mixinDep = mixinSource == "fabric" ? "net.fabricmc:sponge-mixin:$mixinVersion" : "io.github.legacymoddingmc:sponge-mixin:$mixinVersion"
			mixinClassifier = "$mixinSource-$mixinVersion"
			
			dependencies {
				add("shadow$sourceSuffix", "$mixinGroup:sponge-mixin:$mixinVersion", {
					exclude group: "org.ow2.asm"
				})
				add("shadow$sourceSuffix", 'org.ow2.asm:asm-tree:9.4')
				add("shadow$sourceSuffix", 'org.ow2.asm:asm-commons:9.4')
				add("shadow$sourceSuffix", 'org.ow2.asm:asm-util:9.4')

				add("shadowBridge$sourceSuffix", "$mixinGroup:sponge-mixin:$mixinVersion", {
					transitive = false
				})
			}
		} else {
			mixinClassifier = "spongepowered-0.8.5"
			
			dependencies {
				add("shadow$sourceSuffix", 'org.spongepowered:mixin:0.8.5')
				add("shadowBridge$sourceSuffix", 'org.spongepowered:mixin:0.8.5', {
					transitive = false
				})
				add("shadow$sourceSuffix", 'com.google.guava:guava:21.0')
				add("shadow$sourceSuffix", 'com.google.code.gson:gson:2.2.4')
				add("shadow$sourceSuffix", 'org.ow2.asm:asm-tree:9.2')
				add("shadow$sourceSuffix", 'org.ow2.asm:asm-commons:9.2')
				add("shadow$sourceSuffix", 'org.ow2.asm:asm-util:9.2')
			}
		}

		// We want to *not* relocate ASM in the bridge classes. So we use a multi-step
		// build procedure:

		// 1. Create relocated Mixin jar, without the bridge classes
		task("mixinJar$sourceSuffix", type: ShadowJar) {
			destinationDirectory = file("build/tmp")
			classifier = "tmpMixin$sourceSuffix"
			configurations = [project.configurations."shadow$sourceSuffix"]

			relocate 'com.google', 'org.spongepowered.libraries.com.google'
			relocate 'org.objectweb.asm', 'org.spongepowered.asm.lib'

			exclude 'org/spongepowered/asm/bridge/RemapperAdapter.class'
			exclude 'org/spongepowered/asm/bridge/RemapperAdapterFML.class'

			// Exclude stuff that's compiled for Java 16

			exclude 'org/spongepowered/asm/service/modlauncher/*'
			exclude 'org/spongepowered/asm/launch/MixinTransformationServiceLegacy*'
			exclude 'org/spongepowered/asm/launch/MixinLaunchPlugin*'
			exclude 'org/spongepowered/asm/launch/MixinTransformationService*'
			exclude 'org/spongepowered/asm/launch/platform/container/ContainerHandleModLauncherEx*'

			exclude 'META-INF/services/cpw.mods.modlauncher.api.ITransformationService'
			exclude 'META-INF/services/cpw.mods.modlauncher.serviceapi.ILaunchPluginService'

			// Exclude jar-specific stuff

			exclude 'META-INF/MUMFREY*'
		}

		// 2. Create Mixin jar without relocation, with *only* the bridge classes
		task("bridgeJar$sourceSuffix", type: ShadowJar) {
			destinationDirectory = file("build/tmp")
			classifier = "tmpBridge$sourceSuffix"
			configurations = [project.configurations."shadowBridge$sourceSuffix"]

			include 'org/spongepowered/asm/bridge/RemapperAdapter.class'
			include 'org/spongepowered/asm/bridge/RemapperAdapterFML.class'
		}

		// 3. Combine the two jars
		task("shadowJar$sourceSuffix", type: ShadowJar) {
			version = versionBase + "+" + mixinClassifier
			from(sourceSets.main.output) {
				exclude "mcmod.info"
			}

			//enabled = false
			dependsOn "mixinJar$sourceSuffix"
			dependsOn "bridgeJar$sourceSuffix"

			from zipTree(tasks."mixinJar$sourceSuffix".archiveFile).matching { exclude 'module-info.class' }
			from zipTree(tasks."bridgeJar$sourceSuffix".archiveFile).matching { include 'org/spongepowered/asm/bridge/*' }

			doLast {
				delete tasks."mixinJar$sourceSuffix".archiveFile
				delete tasks."bridgeJar$sourceSuffix"
			}

			manifest {
				attributes(
					'TweakClass': 'org.spongepowered.asm.launch.MixinTweaker',
					'FMLCorePluginContainsFMLMod': 'true',
					'ForceLoadAsMod': 'true',
				)
			}
		}

		jar.dependsOn("shadowJar$sourceSuffix")
	} else if (mixinSource == "gasmix") {
		// GasMix
		
		mixinClassifier = "gasmix-0.8.5-gasstation_7"
		
		dependencies {
			add("shadow$sourceSuffix", 'org.spongepowered:mixin:0.8.5-gasstation_7')
		}

		task("shadowJar$sourceSuffix", type: ShadowJar) {
			from(sourceSets.main.output) {
				exclude "mcmod.info"
			}

			version = versionBase + "+" + mixinClassifier
			classifier = ''
			configurations = [project.configurations."shadow$sourceSuffix"]

			manifest {
				attributes(
					'TweakClass': 'org.spongepowered.asm.launch.MixinTweaker',
					'FMLCorePluginContainsFMLMod': 'true',
					'ForceLoadAsMod': 'true',
				)
			}
		}

		jar.dependsOn("shadowJar$sourceSuffix")
	} else if (mixinSource == "gtnh") {
		// GTNH
		
		// Adapted from GTNHMixins's build script

		def mixinVersion = "0.8.5-GTNH-2"
		mixinClassifier = "gtnh-$mixinVersion"
		def asmVersion = "9.4"
		
		dependencies {
			add("shadow$sourceSuffix", "org.spongepowered:mixin:$mixinVersion")
			add("shadow$sourceSuffix", "org.ow2.asm:asm-tree:$asmVersion")
			add("shadow$sourceSuffix", "org.ow2.asm:asm-commons:$asmVersion")
			add("shadow$sourceSuffix", "org.ow2.asm:asm-util:$asmVersion")
			add("shadow$sourceSuffix", "com.google.guava:guava:21.0")
			add("shadowBridge$sourceSuffix", 'org.spongepowered:mixin:0.8.5')
		}

		// We want to *not* relocate ASM in the bridge classes. So we use a multi-step
		// build procedure:

		// 1. Create relocated Mixin jar, without the bridge classes
		task("mixinJar$sourceSuffix", type: ShadowJar) {
			destinationDirectory = file("build/tmp")
			archiveFileName.set("mixin-$mixinVersion-repack.jar")
			configurations = [project.configurations."shadow$sourceSuffix"]

			mergeServiceFiles()

			exclude 'META-INF/MANIFEST.MF', 'META-INF/maven/**', 'META-INF/*.RSA', 'META-INF/*.SF'
			exclude '**/module-info.class'

			// we use this instead of 'org.spongepowered.libraries.org.objectweb.asm'
			relocate 'org.objectweb.asm', 'org.spongepowered.asm.lib'
			relocate 'com.google.common', 'org.spongepowered.libraries.com.google.common'
			relocate 'com.google.thirdparty.publicsuffix', 'org.spongepowered.libraries.com.google.thirdparty.publicsuffix'
		}

		// 2. Create Mixin jar without relocation, with *only* the bridge classes
		task("bridgeJar$sourceSuffix", type: ShadowJar) {
			destinationDirectory = file("build/tmp")
			classifier = 'tmpBridge'
			configurations = [project.configurations."shadowBridge$sourceSuffix"]

			include 'org/spongepowered/asm/bridge/RemapperAdapter.class'
			include 'org/spongepowered/asm/bridge/RemapperAdapterFML.class'
		}

		// 3. Combine the two jars
		task("shadowJar$sourceSuffix", type: ShadowJar) {
			from(sourceSets.main.output) {
				exclude "mcmod.info"
			}

			version = versionBase + "+" + mixinClassifier

			dependsOn "mixinJar$sourceSuffix"
			dependsOn "bridgeJar$sourceSuffix"

			from zipTree(tasks."mixinJar$sourceSuffix".archiveFile).matching {
				exclude "META-INF/*.RSA", "META-INF/*.SF", "META-INF/*.MF"
				exclude "META-INF/services/*.Processor"
				// Replaced by local classes
				exclude "org/spongepowered/asm/bridge/**"
			}
			from zipTree(tasks."bridgeJar$sourceSuffix".archiveFile).matching { include 'org/spongepowered/asm/bridge/*' }

			doLast {
				delete tasks."mixinJar$sourceSuffix".archiveFile
				delete tasks."bridgeJar$sourceSuffix".archiveFile
			}

			manifest {
				attributes(
					'TweakClass': 'org.spongepowered.asm.launch.MixinTweaker',
					'FMLCorePluginContainsFMLMod': 'true',
					'ForceLoadAsMod': 'true',
				)
			}
		}

		jar.dependsOn("shadowJar$sourceSuffix")
	}

	// Common

	task("createMcmodInfo$sourceSuffix", type: Copy) {
		outputs.upToDateWhen { false }
		from 'src/main/resources/mcmod.info'
		into "build/tmp/mcmod.${mixinSource}.info"
		filter {
			line -> line.replaceAll('@MIXIN_CLASSIFIER@', mixinClassifier).replaceAll('@MIXIN_SOURCE_CAPITALIZED@', mixinSourceCapitalized).replaceAll('@VERSION@', "$versionBase+$mixinClassifier")
		}
	}

	tasks."shadowJar$sourceSuffix" {
		dependsOn("createMcmodInfo$sourceSuffix")
		from "build/tmp/mcmod.${mixinSource}.info/mcmod.info"
	}

	publishing {
		publications {
			create("maven$sourceSuffix", MavenPublication) {
				artifact tasks."shadowJar$sourceSuffix"

				artifactId = archivesBaseName
				version = tasks."shadowJar$sourceSuffix".version
			}
		}
	}
}

// Obfuscation is useless because we're not compiling code referencing Minecraft classes
reobf.enabled = false

jar.enabled = false
sourcesJar.enabled = false
